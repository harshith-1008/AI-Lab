#TEAM MEMBER
#P DHANUSH HU22CSEN0300313
#P SURYATEJ HU22CSEN0300183
#P SAI HARSHITH HU22CSEN0300317

goal_state = ((1, 2, 3), (4, 5, 6), (7, 8, 0)) 

directions = {
    "up": (-1, 0),
    "down": (1, 0),
    "left": (0, -1),
    "right": (0, 1)
}

def find_empty_tile(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                goal_i, goal_j = divmod(value - 1, 3)
                distance += abs(i - goal_i) + abs(j - goal_j)
    return distance

def get_neighbors(state):
    neighbors = []
    x, y = find_empty_tile(state)
    for move, (dx, dy) in directions.items():
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_state = [list(row) for row in state]
            new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
            neighbors.append(tuple(tuple(row) for row in new_state))
    return neighbors

def a_star(start_state):
    open_list = [(start_state, [], 0)]  # (state, path, cost)
    visited = set()

    while open_list:
        current_state, path, cost = open_list.pop(0)
        if current_state == goal_state:
            return path

        if current_state in visited:
            continue
        visited.add(current_state)

        for neighbor in get_neighbors(current_state):
            if neighbor not in visited:
                new_path = path + [neighbor]
                open_list.append((neighbor, new_path, cost + 1))
                open_list.sort(key=lambda x: x[2] + manhattan_distance(x[0]))

    return None 

start_state = ((1, 2, 3), (4, 5, 6), (0, 7, 8))
solution = a_star(start_state)

if solution:
    for step in solution:
        for row in step:
            print(row)
        print("-----")
else:
    print("No solution found.")
